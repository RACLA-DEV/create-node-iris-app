
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  name: 'name',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roomId: 'roomId',
  nickname: 'nickname',
  isActive: 'isActive',
  joinedAt: 'joinedAt',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roomId: 'roomId',
  nickname: 'nickname',
  activityType: 'activityType',
  timestamp: 'timestamp',
  oldNickname: 'oldNickname',
  newNickname: 'newNickname'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Room: 'Room',
  Member: 'Member',
  MemberActivity: 'MemberActivity'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ubuntu/projects/create-node-iris-app/templates/new-delete-member/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ubuntu/projects/create-node-iris-app/templates/new-delete-member/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// 채팅방 정보 모델\nmodel Room {\n  id        String   @id @default(cuid())\n  roomId    String   @unique // 카카오 방 ID\n  name      String\n  type      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // 관계\n  members    Member[] // 방 멤버들\n  activities MemberActivity[] // 방의 모든 활동 기록 (입퇴장 + 닉변)\n\n  @@map(\"rooms\")\n}\n\n// 멤버 모델 (사용자 정보 + 멤버십 정보)\nmodel Member {\n  id        String   @id @default(cuid())\n  userId    String // 카카오톡 사용자 ID\n  roomId    String // 방 ID\n  nickname  String // 현재 닉네임\n  isActive  Boolean  @default(true) // 현재 방에 있는지 여부\n  joinedAt  DateTime @default(now()) // 최초 입장 시간\n  lastSeen  DateTime @default(now()) // 마지막 활동 시간\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // 관계\n  room       Room             @relation(fields: [roomId], references: [roomId], onDelete: Cascade)\n  activities MemberActivity[] // 이 멤버의 활동 기록들\n\n  // 제약 조건\n  @@unique([userId, roomId]) // 한 방에 같은 사용자는 하나의 멤버십만\n  @@index([roomId, isActive]) // 방별 활성 멤버 조회용\n  @@index([userId, isActive]) // 사용자별 활성 방 조회용\n  @@index([userId]) // 사용자 ID로 조회\n  @@map(\"members\")\n}\n\n// 멤버 활동 기록 모델 (입퇴장 + 닉네임 변경 통합)\nmodel MemberActivity {\n  id           String   @id @default(cuid())\n  userId       String // 카카오톡 사용자 ID\n  roomId       String // 카카오톡 방 ID\n  nickname     String // 활동 당시 닉네임\n  activityType String // \"JOIN\" | \"LEAVE\" | \"NICKNAME_CHANGE\"\n  timestamp    DateTime @default(now())\n\n  // 닉네임 변경 전용 필드 (닉네임 변경일 때만 사용)\n  oldNickname String? // 기존 닉네임 (NICKNAME_CHANGE일 때만)\n  newNickname String? // 새 닉네임 (NICKNAME_CHANGE일 때만)\n\n  // 관계\n  room   Room    @relation(fields: [roomId], references: [roomId], onDelete: Cascade)\n  member Member? @relation(fields: [userId, roomId], references: [userId, roomId], onDelete: Cascade)\n\n  // 통계용 인덱스\n  @@index([userId, roomId, timestamp]) // 사용자별 방별 시간순 조회\n  @@index([roomId, timestamp]) // 방별 시간순 조회\n  @@index([roomId, activityType, timestamp]) // 방별 활동 타입별 조회\n  @@map(\"member_activities\")\n}\n",
  "inlineSchemaHash": "f61101256f32cde3721c9e3a790c6d7a776652b449a4c37c334dec664cae2f7b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Room\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToRoom\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"MemberActivity\",\"relationName\":\"MemberActivityToRoom\"}],\"dbName\":\"rooms\"},\"Member\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSeen\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"MemberToRoom\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"MemberActivity\",\"relationName\":\"MemberToMemberActivity\"}],\"dbName\":\"members\"},\"MemberActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"oldNickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"newNickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"MemberActivityToRoom\"},{\"name\":\"member\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToMemberActivity\"}],\"dbName\":\"member_activities\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

